package main

import (
	"fmt"
	"sync"
	"sync/atomic"
	"time"
	"tversion/pool"

	"github.com/panjf2000/ants/v2"
)

var sum int32

func myFunc(i interface{}) {
	n := i.(int32)
	atomic.AddInt32(&sum, n)
	fmt.Printf("run with %d\n", n)
}

func demoFunc(num int) int {
	num += 1
	fmt.Println("Hello World!")
	return num
}

func main()  {
	p := pool.NewPool(10000)
	num := 0
	for i:= 0;i < 10000; i++ {
		p.Add(1)
		go func() {
			num += 1
			p.Done()
		}()
		p.Wait()
	}

	fmt.Println(num)
}

func main1() {
	var wg sync.WaitGroup
	p, _ := ants.NewPool(10000, ants.WithExpiryDuration(10 * time.Millisecond))
	defer p.Release()
	num := 0
	for i := 0; i < 10000; i++ {
		wg.Add(1)
		_ = p.Submit(func() {
			num = demoFunc(num)
			wg.Done()
		})
		wg.Wait()
	}

	fmt.Println(num)
}
