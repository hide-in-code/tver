package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"strings"
	"tversion/pool"
	"tversion/utils"
)

type Version struct {
	Ver map[string]string `json:"ver"`
}

func commit(dir string, version string)  {
	var versionInfo []string

	files := utils.Walk(dir)
	p := pool.NewPool(100)
	fmt.Println(len(files))
	for _, filepath := range files {
		p.Add(1)
		go func() {
			//md5 := utils.GetMd5(filepath)
			md5 := "erwerwe"
			fileStr := md5 + "||" +  filepath
			versionInfo = append(versionInfo, fileStr)
			p.Done()
		}()
	}

	p.Wait()

	fmt.Println(len(versionInfo))
	ver := make(map[string]string)
	for _, fileStr := range versionInfo {
		fileInfo := strings.Split(fileStr, "||")
		ver[fileInfo[1]] = fileInfo[0]
	}

	newVersion := &Version{
		Ver: ver,
	}

	fp , err := os.OpenFile(version + ".json", os.O_RDWR|os.O_CREATE, 0600)
	defer fp.Close()
	if err != nil {
		panic(err)
	}

	data, err := json.Marshal(newVersion)
	if err != nil {
		panic(nil)
	}

	_, err = fp.Write(data)
	if err != nil {
		panic(nil)
	}
}

func getVersionData(version string) *Version {
	jsonPath := version + ".json"
	f , err := os.Open(jsonPath)
	defer f.Close()
	if err != nil {
		panic(err)
	}
	r := io.Reader(f)
	ret := &Version{}
	//ret.Map = make(map[string]string)
	if err = json.NewDecoder(r).Decode(ret); err != nil{
		panic(err)
	}

	return ret
}

func keyExist(key string, m map[string]string) bool {
	if _, ok := m[key]; ok {
		return true
	}

	return false
}

func diffAddUpdate(barMap map[string]string, sourceMap map[string]string)  {
	for path, md5 := range barMap {
		if !keyExist(path, sourceMap) {
			fmt.Println("新增文件" + path)
			continue
		}

		if md5 != sourceMap[path] {
			fmt.Println("=================")
			fmt.Println(md5)
			fmt.Println(sourceMap[path])
			fmt.Println(path)
			fmt.Println("修改文件" + path)
			fmt.Println("=================")
		}
	}


	//p := pool.NewPool(100)
	//for path, md5 := range barMap {
	//	p.Add(1)
	//	go func() {
	//		if !keyExist(path, sourceMap) {
	//			fmt.Println("新增文件" + path)
	//			p.Done()
	//			return
	//		}
	//
	//		if md5 != sourceMap[path] {
	//			fmt.Println("=================")
	//			fmt.Println(md5)
	//			fmt.Println(sourceMap[path])
	//			fmt.Println(path)
	//			fmt.Println("修改文件" + path)
	//			fmt.Println("=================")
	//		}
	//
	//		p.Done()
	//	}()
	//}
	//p.Wait()
}

func diff(version1 string, version2 string)  {
	v1Data := getVersionData(version1)
	v2Data := getVersionData(version2)

	diffAddUpdate(v1Data.Ver, v2Data.Ver)
}

func main()  {
	commit("/Users/hejinlong/工作/点云数据111/", "v2")
	//diff("v1", "v2")
}
